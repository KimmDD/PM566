}
x <- matrix(rnorm(1e4), nrow=10)
# Benchmarking
microbenchmark::microbenchmark(
fun2(),
fun2alt()
)
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
M
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2alt <- function(x) {
# YOUR CODE HERE
}
x <- matrix(rnorm(1e4), nrow=10)
# Benchmarking
microbenchmark::microbenchmark(
fun2(),
fun2alt()
)
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
M
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2alt <- function(x) {
# YOUR CODE HERE
}
x <- matrix(rnorm(1e4), nrow=10)
# Benchmarking
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
M
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2(M)
fun2alt <- function(x) {
# YOUR CODE HERE
}
x <- matrix(rnorm(1e4), nrow=10)
# Benchmarking
?apply
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
M
x <- matrix(rnorm(1e4), nrow=10)
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2(M)
fun2alt <- function(x) {
# YOUR CODE HERE
max.col(x, ties.method = c("random", "first", "last"))
}
fun2alt(M)
# Benchmarking
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
M
x <- matrix(rnorm(1e4), nrow=10)
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2(M)
fun2alt <- function(x) {
# YOUR CODE HERE
max.col(x, ties.method = c("random"))
}
fun2alt(M)
# Benchmarking
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
x <- matrix(rnorm(1e4), nrow=10)
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2alt <- function(x) {
# YOUR CODE HERE
max.col(t(x))
}
# Benchmarking
microbenchmark::microbenchmark(
fun2(),
fun2alt()
)
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
x <- matrix(rnorm(1e4), nrow=10)
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2alt <- function(x) {
# YOUR CODE HERE
max.col(t(x))
}
# Benchmarking
microbenchmark::microbenchmark(
fun2(x),
fun2alt(x)
)
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2alt <- function(x) {
# YOUR CODE HERE
max.col(t(x))
}
# Benchmarking
microbenchmark::microbenchmark(
fun2(M),
fun2alt(M)
)
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
M <- matrix(runif(12), ncol=4)
# Find each column's max value
fun2 <- function(x) {
apply(x, 2, max)
}
fun2(x=M)
fun2alt <- function(x) {
# YOUR CODE HERE
max.col(t(x))
}
fun2alt(x=M)
# Benchmarking
microbenchmark::microbenchmark(
fun2(x),
fun2alt(x)
)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, "stat", "dat", "idx", envir=environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
stopCluster(cl)
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, "stat", "dat", "idx", envir=environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(cl, seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
stopCluster(cl)
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, "stat", "dat", "idx")
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(cl, seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
stopCluster(cl)
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, "stat", "dat", "idx")
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(cl, seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
stopCluster(cl)
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"))
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(cl, seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
stopCluster(cl)
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"), envir = environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(cl, seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
stopCluster(cl)
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"), envir = environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(cl, seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"), envir = environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
stopCluster(cl)
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"), envir = environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"), envir = environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
stopCluster(cl)
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353
library(parallel)
my_boot <- function(dat, stat, R, ncpus = 1L) {
# Getting the random indices
n <- nrow(dat)
idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
# Making the cluster using `ncpus`
# STEP 1: GOES HERE
cl <- makePSOCKcluster(4)
# STEP 2: GOES HERE
clusterSetRNGStream(cl, 123)
clusterExport(cl, c("stat", "dat","idx"), envir = environment())
# STEP 3: THIS FUNCTION NEEDS TO BE REPLACES WITH parLapply
ans <- lapply(seq_len(R), function(i) {
stat(dat[idx[,i], , drop=FALSE])
})
# Coercing the list into a matrix
ans <- do.call(rbind, ans)
# STEP 4: GOES HERE
ans
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
